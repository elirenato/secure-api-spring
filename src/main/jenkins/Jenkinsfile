pipeline {
    options {
      timeout(time: 10, unit: 'MINUTES')
      disableConcurrentBuilds()
    }
    agent {
        // Must have Docker Pipeline and Docker Commons Plugin Installed
        // The image name could be used but with the Dockerfile it's possible customize the image if needed
        dockerfile {
            filename 'Dockerfile'
            dir 'src/main/jenkins'
            args """
                -u root:root
                -v /root/.m2:/root/.m2
                -v /var/run/docker.sock:/var/run/docker.sock
                -e REGISTRY_HOST=$REGISTRY_HOST
                -e REGISTRY_USERNAME=$REGISTRY_USERNAME
                -e REGISTRY_PASSWORD=$REGISTRY_PASSWORD
            """
        }
    }
    stages {
        stage('Test') {
            steps {
                sh './mvnw clean test'
            }
            // Must have JaCoCo plugin installed
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    step( [ $class: 'JacocoPublisher' ] )
                }
            }
        }
        stage('Build') {
            steps {
                sh """
                    ./mvnw -DskipTests package -DregistryTag=${REGISTRY_TAG} -DspringAppPort=${SPRING_APP_PORT}
                    export DOCKER_BUILDKIT=1 && docker build -t secure-api-spring:latest -f ./src/main/docker/deploy/Dockerfile .
                    docker login ${REGISTRY_HOST} --username ${REGISTRY_USERNAME} --password ${REGISTRY_PASSWORD}
                    docker tag secure-api-spring:latest ${REGISTRY_TAG}/secure-api-spring:latest
                    docker push ${REGISTRY_TAG}/secure-api-spring:latest
                """
            }
        }
        stage('Deploy to K8s') {
            steps {
                // SSH Agent Plugin
                sshagent (credentials: ['k8s'])  {
                    sh 'scp -o StrictHostKeyChecking=no -r -v -P ${K8S_SERVER_PORT} ./target/kubernetes/kubernetes.yaml ${K8S_SERVER_USERNAME}@${K8S_SERVER_HOST}:/tmp/kubernetes.yaml'
                    sh 'ssh -o StrictHostKeyChecking=no -p ${K8S_SERVER_PORT} ${K8S_SERVER_USERNAME}@${K8S_SERVER_HOST} \"microk8s kubectl apply -f /tmp/kubernetes.yaml\"'
                }
            }
        }
    }
}
